@using ELTE.IssueR.Models
@using ELTE.IssueR.Models.Permissions

@model ProjectDataViewModel

@{
    ViewBag.Title = "ProjectData";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section AddToHead
{
    <link href="@Url.Content("~/Content/Styles/FancyFormStyle.css")" rel="stylesheet" type="text/css"/>
    <link href="@Url.Content("~/Content/Styles/ProjectStatsStyle.css")" rel="stylesheet" type="text/css"/>
    <link href="~/Content/bootstrap.min.css" rel="stylesheet" />
    <link href="@Url.Content("~/Content/jsgantt.css")" rel="stylesheet" type="text/css" />

    <script src="~/Scripts/Chart.min.js" type="text/javascript"></script>
    <script src="~/Scripts/jquery-2.1.3.min.js" type="text/javascript"></script>
    <script type="text/javascript" src="../../Scripts/bootstrap.min.js"></script>
    <script type="text/javascript" src="../../Scripts/hex-to-rgb.min.js"></script>
    <script type="text/javascript" src="../../Scripts/jsgantt.js"></script>

    <script type="text/javascript">
        // Initializing Tooltips
        $(function() {
            $('[data-toggle="tooltip"]').tooltip();
        })
    </script>

    <script type="text/javascript">
        function getColor(param) {
            switch (param) {
                // issue types
                case "Feature":
                    return "#91C46C";
                case "Bug":
                    return "#FF6B6B";
                case "Refactor":
                    return "#287D7D";

                    // issue statuses
                case "To_do":
                    return "#b9d9ca";
                case "In_progress":
                    return "#f2e7d1";
                case "Needs_review":
                    return "#e16559";
                case "Done":
                    return "#e7c393";

                default:
                    return "#00ff00";
            }
        }

        function getHightlightColor(param) {
            switch (param) {
                // issue types
                case "Feature":
                    return "#81AF60";
                case "Bug":
                    return "#E45F5F";
                case "Refactor":
                    return "#236F6F";

                    // issue statuses
                case "To_do":
                    return "#A5C2B4";
                case "In_progress":
                    return "#D8CEBA";
                case "Needs_review":
                    return "#C95A4F";
                case "Done":
                    return "#CEAE83";

                default:
                    return "#FF0000";
            }
        }

        var pieChartLegendTemplate = "" +
            "<ul class=\"<%=name.toLowerCase()%>-legend\">" +
            "   <% for (var i=0; i<segments.length; i++){%>" +
            "       <li class=\"pielegendli\"><span style=\"background-color:<%=segments[i].fillColor%>\"></span>" +
            "           <%if(segments[i].label){%><%=segments[i].label%><%}%>" +
            "       </li>" +
            "   <%}%>" +
            "</ul>";

        var radarAndLineChartLegendTemplate = "" +
            "<ul class=\"<%=name.toLowerCase()%>-legend\">" +
            "   <% for (var i=0; i<datasets.length; i++){%>" +
            "       <li class=\"radarandlinelegendli\"><span style=\"background-color:<%=datasets[i].strokeColor%>\"></span>" +
            "           <%if(datasets[i].label){%><%=datasets[i].label%><%}%>" +
            "       </li>" +
            "   <%}%>" +
            "</ul>";

        function drawPieChart(contextId, chartTypeId) {
            $.ajax({
                type: "GET",
                url: "/api/Charts/Pies?type=" + chartTypeId + "&projectId=" + @Model.Id,
                dataType: "json",
                success: function(data) {
                    var chartData = new Array(data.length);
                    for (var i in data) {
                        chartData[i] = { "value": data[i].Value, "color": getColor(data[i].Label), "highlight": getHightlightColor(data[i].Label), "label": data[i].Label.replace("_", " ") };
                    }

                    // Draw chart
                    var context = $(contextId).get(0).getContext("2d");
                    var pieChart = new Chart(context).Pie(chartData, {
                        percentageInnerCutout: 40,
                        legendTemplate : pieChartLegendTemplate
                    });

                    // Legend
                    var legend = pieChart.generateLegend();
                    var legendContext = $(contextId + "-legend");
                    $(legendContext).append(legend);
                },
                error: function(xhr, status, errorThrown) {
                    console.log("Some error happend. :( " + xhr + "; " + status + "; " + errorThrown);
                }
            });
        }

        function drawRadarChart(contextId) {
            $.ajax({
                type: "GET",
                url: "/api/Charts/Radars?projectId=" + @Model.Id,
                dataType: "json",
                success: function(data) {
                    var labels = data.Labels;
                    var datasets = new Array(data.Datasets.length);

                    datasets[0] = {
                        "datasetName": "All: ",
                        "label": data.Datasets[0].Label,
                        "fillColor": "rgba(220,220,220,0.2)",
                        "strokeColor": "rgba(220,220,220,1)",
                        "pointColor": "rgba(220,220,220,1)",
                        "pointStrokeColor": "#fff",
                        "pointHighlightFill": "#fff",
                        "pointHighlightStroke": "rgba(220,220,220,1)",
                        "data": data.Datasets[0].Data
                    }

                    datasets[1] = {
                        "datasetName": "In progress: ",
                        "label": data.Datasets[1].Label,
                        "fillColor": "rgba(151,187,205,0.2)",
                        "strokeColor": "rgba(151,187,205,1)",
                        "pointColor": "rgba(151,187,205,1)",
                        "pointStrokeColor": "#fff",
                        "pointHighlightFill": "#fff",
                        "pointHighlightStroke": "rgba(151,187,205,1)",
                        "data": data.Datasets[1].Data
                    }

                    // Draw chart
                    var chartData = { "labels": labels, "datasets": datasets };
                    var context = $(contextId).get(0).getContext("2d");
                    var radarChart = new Chart(context).Radar(chartData, {
                        legendTemplate : radarAndLineChartLegendTemplate
                    });

                    // Legend
                    var legend = radarChart.generateLegend();
                    var legendContext = $(contextId + "-legend");
                    $(legendContext).append(legend);
                },
                error: function(xhr, status, errorThrown) {
                    console.log("Some error happend. :( " + xhr + "; " + status + "; " + errorThrown);
                }
            });
        }

        var prevStatusLineChart = null;
        var prevTypeLineChart = null;

        function drawLineChart(contextId, chartTypeId, scale) {
            $.ajax({
                type: "GET",
                url: "/api/Charts/Lines?type=" + chartTypeId + "&scale=" + scale + "&projectId=" + @Model.Id,
                dataType: "json",
                success: function(data) {
                    var labels = data.Labels;
                    var datasets = new Array(data.Datasets.length);

                    for (var i in data.Datasets) {
                        datasets[i] = {
                            "label": data.Datasets[i].Label.replace("_", " "),
                            "fillColor": hexToRgb(getColor(data.Datasets[i].Label), 0.2).toString(),
                            "strokeColor": hexToRgb(getHightlightColor(data.Datasets[i].Label), 1).toString(),
                            "pointColor": hexToRgb(getHightlightColor(data.Datasets[i].Label), 1).toString(),
                            "pointStrokeColor": "#fff",
                            "pointHighlightFill": "#fff",
                            "pointHighlightStroke": hexToRgb(getHightlightColor(data.Datasets[i].Label), 1).toString(),
                            "data": data.Datasets[i].Data
                        }
                    }

                    // Draw chart
                    var chartData = { "labels": labels, "datasets": datasets };
                    var context = $(contextId).get(0).getContext("2d");
                    var legend;

                    if(chartTypeId === (@((int) ProjectChartTypes.IssuesPerStatus))) {
                        if (prevStatusLineChart != null) prevStatusLineChart.destroy();
                        prevStatusLineChart = new Chart(context).Line(chartData, {
                            legendTemplate : radarAndLineChartLegendTemplate
                        });
                        legend = prevStatusLineChart.generateLegend();
                    }

                    if(chartTypeId === (@((int) ProjectChartTypes.IssuesPerType))) {
                        if (prevTypeLineChart != null) prevTypeLineChart.destroy();
                        prevTypeLineChart = new Chart(context).Line(chartData, {
                            legendTemplate : radarAndLineChartLegendTemplate
                        });
                        legend = prevTypeLineChart.generateLegend();
                    }

                    // Legend
                    var legendContext = $(contextId + "-legend");
                    legendContext.text("");
                    legendContext.append(legend);
                },
                error: function(xhr, status, errorThrown) {
                    console.log("Some error happend. :( " + xhr + "; " + status + "; " + errorThrown);
                }
            });
        }

        $(function() {
            var typePieContextId = "#issues-per-type-pie-chart";
            var statusPieContextId = "#issues-per-status-pie-chart";
            var userIssuesRadarContextId = "#user-issues-radar-chart";
            var statusLineContextId = "#issue-status-line-chart";
            var typeLineChartContextId = "#issue-type-line-chart";

            drawPieChart(typePieContextId, @((int) ProjectChartTypes.IssuesPerType));
            drawPieChart(statusPieContextId, @((int) ProjectChartTypes.IssuesPerStatus));
            drawRadarChart(userIssuesRadarContextId);
            drawLineChart(statusLineContextId, @((int) ProjectChartTypes.IssuesPerStatus), @((int) IssueChangeScale.RealTime));
            drawLineChart(typeLineChartContextId, @((int) ProjectChartTypes.IssuesPerType), @((int) IssueChangeScale.RealTime));

            $("input[name='statusline']").change(function() {
                switch ($(this).val()) {
                    case "status-line-real-time":
                        drawLineChart(statusLineContextId, @((int) ProjectChartTypes.IssuesPerStatus), @((int) IssueChangeScale.RealTime));
                        break;;
                    case "status-line-daily":
                        drawLineChart(statusLineContextId, @((int) ProjectChartTypes.IssuesPerStatus), @((int) IssueChangeScale.Daily));
                        break;
                    case "status-line-weekly":
                        drawLineChart(statusLineContextId, @((int) ProjectChartTypes.IssuesPerStatus), @((int) IssueChangeScale.Weekly));
                        break;
                }
            });

            $("input[name='typeline']").change(function() {
                switch ($(this).val()) {
                    case "type-line-real-time":
                        drawLineChart(typeLineChartContextId, @((int) ProjectChartTypes.IssuesPerType), @((int) IssueChangeScale.RealTime));
                        break;;
                    case "type-line-daily":
                        drawLineChart(typeLineChartContextId, @((int) ProjectChartTypes.IssuesPerType), @((int) IssueChangeScale.Daily));
                        break;
                    case "type-line-weekly":
                        drawLineChart(typeLineChartContextId, @((int) ProjectChartTypes.IssuesPerType), @((int) IssueChangeScale.Weekly));
                        break;
                }
            });
        });
    </script>
}

<p></p>

<button type="button" class="btn buttonlikelink blue fs14" onclick="history.go(-1); return false;">
    <span class="glyphicon glyphicon-circle-arrow-left" aria-hidden="true">
    </span>
    Vissza
</button>

<h1>@Model.Project.Name</h1>
<b>&nbsp; &copy; @Model.Project.OrganizationName&trade;</b>
<hr />

<p></p>

<table style="width: 90%; margin: 0 auto 0 auto">
    <tr>
        <td style="width: 80%; text-align: left;">@Model.Project.Description</td>
        <td style="width: 20%; text-align: left;"><b>Határidő:</b> <br /> @String.Format("{0:d}", Model.Project.Deadline)</td>
    </tr>
</table>

@if (Html.Action("HasPermission", new { projId = Model.Id, perm = BasePermission.EditContent }).ToString() == true.ToString())
{
    @Html.ActionLink("Adatok módosíta", "ProjectDataModify", "Project", new { @Model.Id }, new { @class = "buttonlikelink green" })
}

<p></p>
<hr />
<h3>Tagok</h3>
<hr />

<table class="table table-striped table-hover table-bordered alignRight" style="width: 90%; margin: 0 auto 15px auto">
    @foreach (User user in @Model.ProjectMembers)
    {
        <tr>
            <td style="vertical-align: middle; width: 80%">@user.Name</td>

            <td style="width: 20%">
                @if (Html.Action("HasPermission", new { projId = Model.Id, perm = BasePermission.EditMember }).ToString() == true.ToString())
                {
                    <button type="button" class="btn btn-default glyphButton" title="Jogosultságok módosítása" data-toggle="tooltip" data-placement="top"
                            onclick="location.href='@Url.Action("EditmemberPermissions", "Project", new { projId = Model.Id, userId = user.Id })'">
                        <span class="glyphicon glyphicon-pencil" aria-hidden="true"></span>
                    </button>
                }

                @if (Html.Action("HasPermission", new { projId = Model.Id, perm = BasePermission.RemoveContent }).ToString() == true.ToString())
                {
                    <button type="button" class="btn btn-default glyphButton" title="Eltávolítás" data-toggle="tooltip" data-placement="top"
                            onclick="location.href='@Url.Action("ProjectMemberRemove", "Project", new { removeableUserId = @user.Id, projectId = @Model.Id })'">
                        <span class="glyphicon glyphicon-trash" aria-hidden="true"></span>
                    </button>
                }
            </td>
        </tr>
    }
</table>

@if (Html.Action("HasPermission", new { projId = Model.Id, perm = BasePermission.AddMember }).ToString() == true.ToString())
{
    @Html.ActionLink("Projekttag hozzáadás", "ProjectMemberAdd", "Project", new { @Model.Id }, new { @class = "buttonlikelink green" })
}

<p></p>
<hr />
<h3>Statisztikák</h3>
<hr />

<p><b>Feladatok száma típus és állapot szerint:</b></p>

<table style="width: 90%; margin: 0 auto 0 auto">
    <tr>
        <td>
            <canvas id="issues-per-type-pie-chart"></canvas>
        </td>
        <td>
            <div id="issues-per-type-pie-chart-legend"></div>
        </td>
        <td>
            <canvas id="issues-per-status-pie-chart"></canvas>
        </td>
        <td>
            <div id="issues-per-status-pie-chart-legend"></div>
        </td>
    </tr>
</table>

<p></p>
<hr />
<p><b>A projekttagok feladatainak aránya:</b></p>

<table style="width: 90%; margin: 0 auto 0 auto">
    <tr>
        <td>
            <canvas id="user-issues-radar-chart" style="width: 600px; height: 600px; margin: 0 auto 0 auto; display: block"></canvas>
        </td>
        <td>
            <div id="user-issues-radar-chart-legend"></div>
        </td>
    </tr>
</table>

<p></p>
<hr />
<p><b>Feladatok állapotának változása:</b></p>

<div id="status-line-container" class="btn-group" data-toggle="buttons">
    <label class="btn btn-primary active">
        <input type="radio" name="statusline" value="status-line-real-time" autocomplete="off" checked> Valós idejű
    </label>
    <label class="btn btn-primary">
        <input type="radio" name="statusline" value="status-line-daily" autocomplete="off"> Napi
    </label>
    <label class="btn btn-primary">
        <input type="radio" name="statusline" value="status-line-weekly" autocomplete="off"> Heti
    </label>
</div>

<table style="width: 90%; margin: 0 auto 0 auto">
    <tr>
        <td style="width: 80%">
            <canvas id="issue-status-line-chart" style="width: 100%"></canvas>
        </td>
        <td style="width: 20%">
            <div id="issue-status-line-chart-legend"></div>
        </td>
    </tr>
</table>

<p></p>
<hr />
<p><b>Feladatok számának változása típusonként:</b></p>

<div id="type-line-container" class="btn-group" data-toggle="buttons">
    <label class="btn btn-primary active">
        <input type="radio" name="typeline" value="type-line-real-time" autocomplete="off" checked> Valós idejű
    </label>
    <label class="btn btn-primary">
        <input type="radio" name="typeline" value="type-line-daily" autocomplete="off"> Napi
    </label>
    <label class="btn btn-primary">
        <input type="radio" name="typeline" value="type-line-weekly" autocomplete="off"> Heti
    </label>
</div>

<table style="width: 90%; margin: 0 auto 0 auto">
    <tr>
        <td style="width: 80%">
            <canvas id="issue-type-line-chart" style="width: 100%"></canvas>
        </td>
        <td style="width: 20%">
            <div id="issue-type-line-chart-legend"></div>
        </td>
    </tr>
</table>

<p></p>
<hr />
<p><b>Gantt-diagram:</b></p>

<div style="position: relative; max-width: 90%" class="gantt" id="GanttChartDIV"></div>

<script>

    var g = new JSGantt.GanttChart('g',document.getElementById('GanttChartDIV'), 'day');
    g.setShowRes(0); // Show/Hide Responsible (0/1)
    g.setShowDur(0); // Show/Hide Duration (0/1)
    g.setShowComp(0); // Show/Hide % Complete(0/1)
    g.setCaptionType('Resource');  // Set to Show Caption

    if( g ) {

        g.AddTaskItem(new JSGantt.TaskItem(1,   'Define Chart API',     '',          '',          'ff0000', 'http://help.com', 0, 'Brian',     0, 1, 0, 1));
        g.AddTaskItem(new JSGantt.TaskItem(11,  'Chart Object',         '2/20/2008', '2/20/2008', 'ff00ff', 'http://www.yahoo.com', 1, 'Shlomy',  100, 0, 1, 1));
        g.AddTaskItem(new JSGantt.TaskItem(12,  'Task Objects',         '',          '',          '00ff00', '', 0, 'Shlomy',   40, 1, 1, 1));
        g.AddTaskItem(new JSGantt.TaskItem(121, 'Constructor Proc',     '2/21/2008', '3/9/2008',  '00ffff', 'http://www.yahoo.com', 0, 'Brian T.', 60, 0, 12, 1));
        g.AddTaskItem(new JSGantt.TaskItem(122, 'Task Variables',       '3/6/2008',  '3/11/2008', 'ff0000', 'http://help.com', 0, '',         60, 0, 12, 1,121));
        g.AddTaskItem(new JSGantt.TaskItem(123, 'Task Functions',       '3/9/2008',  '3/29/2008', 'ff0000', 'http://help.com', 0, 'Anyone',   60, 0, 12, 1, 0, 'This is another caption'));
        g.AddTaskItem(new JSGantt.TaskItem(2,   'Create HTML Shell',    '3/24/2008', '3/25/2008', 'ffff00', 'http://help.com', 0, 'Brian',    20, 0, 0, 1,122));
        g.AddTaskItem(new JSGantt.TaskItem(3,   'Code Javascript',      '',          '',          'ff0000', 'http://help.com', 0, 'Brian',     0, 1, 0, 1 ));
        g.AddTaskItem(new JSGantt.TaskItem(31,  'Define Variables',     '2/25/2008', '3/17/2008', 'ff00ff', 'http://help.com', 0, 'Brian',    30, 0, 3, 1, 'Caption 1'));
        g.AddTaskItem(new JSGantt.TaskItem(32,  'Calculate Chart Size', '3/15/2008', '3/24/2008', '00ff00', 'http://help.com', 0, 'Shlomy',   40, 0, 3, 1));
        g.AddTaskItem(new JSGantt.TaskItem(33,  'Draw Taks Items',      '',          '',          '00ff00', 'http://help.com', 0, 'Someone',  40, 1, 3, 1));
        g.AddTaskItem(new JSGantt.TaskItem(332, 'Task Label Table',     '3/6/2008',  '3/11/2008', '0000ff', 'http://help.com', 0, 'Brian',    60, 0, 33, 1));
        g.AddTaskItem(new JSGantt.TaskItem(333, 'Task Scrolling Grid',  '3/9/2008',  '3/20/2008', '0000ff', 'http://help.com', 0, 'Brian',    60, 0, 33, 1));
        g.AddTaskItem(new JSGantt.TaskItem(34,  'Draw Task Bars',       '',          '',          '990000', 'http://help.com', 0, 'Anybody',  60, 1, 3, 1));
        g.AddTaskItem(new JSGantt.TaskItem(341, 'Loop each Task',       '3/26/2008', '4/11/2008', 'ff0000', 'http://help.com', 0, 'Brian',    60, 0, 34, 1, "332,333"));
        g.AddTaskItem(new JSGantt.TaskItem(342, 'Calculate Start/Stop', '4/12/2008', '5/18/2008', 'ff6666', 'http://help.com', 0, 'Brian',    60, 0, 34, 1));
        g.AddTaskItem(new JSGantt.TaskItem(343, 'Draw Task Div',        '5/13/2008', '5/17/2008', 'ff0000', 'http://help.com', 0, 'Brian',    60, 0, 34, 1));
        g.AddTaskItem(new JSGantt.TaskItem(344, 'Draw Completion Div',  '5/17/2008', '6/04/2008', 'ff0000', 'http://help.com', 0, 'Brian',    60, 0, 34, 1));
        g.AddTaskItem(new JSGantt.TaskItem(35,  'Make Updates',         '10/17/2008','12/04/2008','f600f6', 'http://help.com', 0, 'Brian',    30, 0, 3,  1));

        g.Draw();
        g.DrawDependencies();
    }
    else
    {
        alert("not defined");
    }

</script>
